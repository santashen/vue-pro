name: Deploy Vue and Flask Projects to VPS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Deploy  # ✅ 这里对应你的环境名

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Upload Vue project to VPS
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "dist/**"
          target: "/www/wwwroot/hexo/toy/"
          strip_components: 1

      - name: Upload Flask project to VPS
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "flask_hello/**"
          target: "/www/wwwroot/hexo/hello/"
          strip_components: 1

      - name: Upload Flask Personal Info project to VPS
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "flask_personal_info/**"
          target: "/www/wwwroot/hexo/personal/"
          strip_components: 1

      - name: Upload My Travel project to VPS
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "my_travel/**"
          target: "/www/wwwroot/hexo/travel/"
          strip_components: 1

      - name: Deploy Flask service
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            # 部署 Flask Hello 项目
            cd /www/wwwroot/hexo/hello
            /data/miniconda3/envs/light/bin/pip install -r requirements.txt
            
            # 复制 systemd 服务文件
            sudo cp flask-hello.service /etc/systemd/system/
            
            # 重新加载 systemd 配置
            sudo systemctl daemon-reload
            
            # 启用并启动服务
            sudo systemctl enable flask-hello.service
            sudo systemctl restart flask-hello.service
            
            # 检查服务状态
            sudo systemctl status flask-hello.service
            
            # 部署 Flask Personal Info 项目
            cd /www/wwwroot/hexo/personal
            /data/miniconda3/envs/light/bin/pip install -r requirements.txt
            
            # 初始化数据库（如果需要）
            export FLASK_APP=wsgi.py
            /data/miniconda3/envs/light/bin/python -c "from app import create_app, db; app = create_app(); app.app_context().push(); db.create_all()"
            
            # 复制 systemd 服务文件
            sudo cp flask-personal.service /etc/systemd/system/
            
            # 重新加载 systemd 配置
            sudo systemctl daemon-reload
            
            # 启用并启动服务
            sudo systemctl enable flask-personal.service
            sudo systemctl restart flask-personal.service
            
            # 检查服务状态
            sudo systemctl status flask-personal.service
            
            # 部署 My Travel 静态项目（无需额外配置，只需复制nginx配置）
            echo "My Travel 静态项目已上传到 /www/wwwroot/hexo/travel/"
            
            # 创建 nginx toy 配置目录并复制配置文件
            sudo mkdir -p /www/server/panel/vhost/nginx/toy
            sudo cp /www/wwwroot/hexo/hello/nginx-hello.conf /www/server/panel/vhost/nginx/toy/
            sudo cp /www/wwwroot/hexo/personal/nginx-personal.conf /www/server/panel/vhost/nginx/toy/
            sudo cp /www/wwwroot/hexo/travel/nginx-travel.conf /www/server/panel/vhost/nginx/toy/
            
            # 检查主配置文件是否包含 toy 目录
            if ! grep -q "include /www/server/panel/vhost/nginx/toy/\*\.conf;" /www/server/panel/vhost/nginx/blog.com.conf; then
                echo "警告：请在 blog.com.conf 中添加以下行来包含 toy 配置："
                echo "include /www/server/panel/vhost/nginx/toy/*.conf;"
            fi
            
            # 测试 nginx 配置
            sudo nginx -t
            
            # 重新加载 nginx
            if [ $? -eq 0 ]; then
                sudo systemctl reload nginx
                echo "nginx 配置已更新并重新加载"
            else
                echo "nginx 配置测试失败，请检查配置文件"
            fi
